@page "/login";
@layout AuthLayout;

@using BlazorKopikoDemoClient.Client.DataModels;
@using BlazorKopikoDemoClient.Client.State;
@using BlazorKopikoDemoClient.Protos;
@using Grpc.Net.Client;
@inject AuthState AuthState;
@inject NavigationManager NavManager
@implements IDisposable;
@inject GrpcChannel channel;

<div>
    <h1 class="text-center fw-bold authHeading">Kopiko</h1>
    <p class="text-center mt-4">Please enter your Email and password!</p>
    <EditForm class="mt-4 d-flex flex-column align-items-stretch" Model="@_loginModel" OnValidSubmit="@HandleValidSubmit">       
        <div class="mb-3">
            <label for="email" class="form-label">Email address</label>
            <InputText class="form-control" id="email" @bind-Value="_loginModel.Email" />
            <ValidationMessage class="fs-6 text-danger mt-2" For="@(()=> _loginModel.Email)" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText class="form-control" id="password" @bind-Value="_loginModel.Password" />
            <ValidationMessage class="fs-6 text-danger mt-2" For="@(()=> _loginModel.Password)" />
        </div>

        @if (_isInvalidCredentials)
        {
            <p class="fs-6 text-danger mt-2 mb-2 text-center">Invalid Credentials!</p>
        }

        <button type="submit" class="btn btn-primary ">Login</button>
        <DataAnnotationsValidator />
    </EditForm>
    <div class="mt-4 d-flex flex-column align-items-center">
        <p>Don't have an account yet!</p>
        <NavLink class="nav-link" href="sign-up">
            <span class="text-primary">Sign Up</span>
        </NavLink>
    </div>
</div>

@code {
    private LoginModel _loginModel = new();
    private bool _isInvalidCredentials = false;

    protected override async Task OnInitializedAsync()
    {
        AuthState.OnChange += StateHasChanged;
        AuthState.OnChange += HandleAuthStateChanged;
        if (AuthState.AuthData.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
        }

    }

    private void HandleAuthStateChanged()
    {
        if (AuthState.AuthData.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
        }
    }

    public void Dispose()
    {        
        AuthState.OnChange -= StateHasChanged;
        AuthState.OnChange += HandleAuthStateChanged;

    }

    private async Task HandleValidSubmit()
    {
        var client = new Auth.AuthClient(channel);
        var loginRequest = new LoginRequest
        {
            Email = _loginModel.Email,
            Password = _loginModel.Password
        };

        try
        {
            var _reply = await client.LoginAsync(loginRequest);
            await AuthState.HandleAuthReply(_reply);
            NavManager.NavigateTo("/");
        }
        catch (Grpc.Core.RpcException ex) when(ex.StatusCode == Grpc.Core.StatusCode.NotFound)
        {
            _isInvalidCredentials = true;
        }
        catch (Grpc.Core.RpcException ex)
        {
            // something went wrong : log / give the user a message
            NavManager.NavigateTo("/");
        }
    }
}
