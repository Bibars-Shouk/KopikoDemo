@page "/sign-up";
@layout AuthLayout;

@using BlazorKopikoDemoClient.Client.DataModels;
@using BlazorKopikoDemoClient.Client.State;
@using BlazorKopikoDemoClient.Protos;
@using Grpc.Net.Client;
@inject AuthState AuthState;
@inject NavigationManager NavManager
@implements IDisposable;
@inject GrpcChannel channel;


<div>
    <h1 class="text-center fw-bold authHeading">Kopiko</h1>
    <p class="text-center mt-4">Please enter your personal information!</p>
    <EditForm class="mt-4 d-flex flex-column align-items-stretch" Model="@_signUpModel" OnValidSubmit="@HandleValidSubmit">
        <div class="mb-3">
            <label for="first_name" class="form-label">First Name</label>
            <InputText class="form-control" id="first_name" @bind-Value="_signUpModel.FirstName" />
            <ValidationMessage class="fs-6 text-danger mt-2" For="@(()=> _signUpModel.FirstName)" />
        </div>
        <div class="mb-3">
            <label for="last_name" class="form-label">Last Name</label>
            <InputText class="form-control" id="last_name" @bind-Value="_signUpModel.LastName" />
            <ValidationMessage class="fs-6 text-danger mt-2" For="@(()=> _signUpModel.LastName)" />
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email address</label>
            <InputText class="form-control" id="email" @bind-Value="_signUpModel.Email" />
            <ValidationMessage class="fs-6 text-danger mt-2" For="@(()=> _signUpModel.Email)" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText class="form-control" id="password" @bind-Value="_signUpModel.Password" />
            <ValidationMessage class="fs-6 text-danger mt-2" For="@(()=> _signUpModel.Password)" />
        </div>

        @if (_isEmailAlreadyInUse)
        {
            <p class="fs-6 text-danger mt-2 mb-2 text-center">User Already Exist!</p>
        }

        <button type="submit" class="btn btn-primary ">Sign Up</button>       
        <DataAnnotationsValidator />
    </EditForm>
    <div class="mt-4 d-flex flex-column align-items-center">
        <p>Already have an account?</p>
        <NavLink class="nav-link" href="login">
            <span class="text-primary">Login</span>
        </NavLink>
    </div>
</div>

@code {
    private SignUpModel _signUpModel = new();
    private bool _isEmailAlreadyInUse = false;

    protected override async Task OnInitializedAsync()
    {
        AuthState.OnChange += StateHasChanged;
        AuthState.OnChange += HandleAuthStateChanged;
        if (AuthState.AuthData.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
        }
    }

    private void HandleAuthStateChanged()
    {
        if (AuthState.AuthData.IsAuthenticated)
        {
            NavManager.NavigateTo("/");
        }
    }

    public void Dispose()
    {
        AuthState.OnChange -= StateHasChanged;
        AuthState.OnChange += HandleAuthStateChanged;

    }

    private async Task HandleValidSubmit()
    {
        var client = new Auth.AuthClient(channel);

        var registerRequest = new RegisterRequest
            {
                FirstName = _signUpModel.FirstName,
                LastName = _signUpModel.LastName,
                Email = _signUpModel.Email,
                Password = _signUpModel.Password

            };

        try
        {
            var _reply = await client.RegisterAsync(registerRequest);
            await AuthState.HandleAuthReply(_reply);
            NavManager.NavigateTo("/");
        }
        catch (Grpc.Core.RpcException ex) when(ex.StatusCode == Grpc.Core.StatusCode.AlreadyExists)
        {
            _isEmailAlreadyInUse = true; 
        }
        catch (Grpc.Core.RpcException ex)
        {
            // something went wrong : log / give the user a message
            NavManager.NavigateTo("/");
        }
    }
}
